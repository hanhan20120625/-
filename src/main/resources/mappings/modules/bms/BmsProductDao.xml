<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.msframe.modules.bms.dao.BmsProductDao">
    
	<sql id="bmsProductColumns">
		a.id AS "id",
		a.name AS "name",
		a.product_ident AS "productIdent",
		a.description AS "description",
		a.product_type AS "productType",
		a.cpsp_id AS "cpspId",
		a.biz_type AS "bizType",
		a.render_period AS "renderPeriod",
		a.tariff_policy_code AS "tariffPolicyCode",
		a.discount_policy_code AS "discountPolicyCode",
		a.create_src AS "createSrc",
		a.fee_type AS "feeType",
		a.fixed_fee AS "fixedFee",
		a.list_price AS "listPrice",
		a.limit_times AS "limitTimes",
		a.promote_expire_time AS "promoteExpireTime",
		a.usage_method AS "usageMethod",
		a.roll_charge AS "rollCharge",
		a.credit_level AS "creditLevel",
		a.level AS "level",
		a.multi_screen_pd AS "multiScreenPd",
		a.sub_effect_type AS "subEffectType",
		a.trial_duration AS "trialDuration",
		a.sub_payment_type AS "subPaymentType",
		a.unsub_effect_type AS "unsubEffectType",
		a.unsub_refund_type AS "unsubRefundType",
		a.start_time AS "startTime",
		a.expire_time AS "expireTime",
		a.review_time AS "reviewTime",
		a.status AS "status",
		a.sort AS "sort",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag",
		a.remarks AS "remarks",
		a.remark1 AS "remark1"
	</sql>
	
	<sql id="bmsProductJoins">
	</sql>
	
    
	<select id="get" resultType="BmsProduct" >
		SELECT 
			<include refid="bmsProductColumns"/>
		FROM bms_product a
		<include refid="bmsProductJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="BmsProduct" >
		SELECT 
			<include refid="bmsProductColumns"/>
		FROM bms_product a
		<include refid="bmsProductJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="name != null and name != ''">
				AND a.name LIKE 
					<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
					<if test="dbName == 'mssql'">'%'+#{name}+'%'</if>
					<if test="dbName == 'mysql'">concat('%',#{name},'%')</if>
			</if>
			<if test="productIdent != null and productIdent != ''">
				AND a.product_ident LIKE 
					<if test="dbName == 'oracle'">'%'||#{productIdent}||'%'</if>
					<if test="dbName == 'mssql'">'%'+#{productIdent}+'%'</if>
					<if test="dbName == 'mysql'">concat('%',#{productIdent},'%')</if>
			</if>
			<if test="description != null and description != ''">
				AND a.description LIKE 
					<if test="dbName == 'oracle'">'%'||#{description}||'%'</if>
					<if test="dbName == 'mssql'">'%'+#{description}+'%'</if>
					<if test="dbName == 'mysql'">concat('%',#{description},'%')</if>
			</if>
			<if test="startTimeBegin != null and startTimeBegin != '' and startTimeEnd != null and startTimeEnd != ''">
				AND a.start_time between #{startTimeBegin} and #{startTimeEnd}
			</if>
		     <if test="expireTimeBegin != null and expireTimeBegin !='' and expireTimeEnd != null and expireTimeEnd !=''">
				AND a.expire_time between  #{expireTimeBegin} and #{expireTimeEnd}
			 </if>
			<if test="status != null and status != '' or status==0">
				AND a.status = #{status}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.sort DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="BmsProduct" >
		SELECT 
			<include refid="bmsProductColumns"/>
		FROM bms_product a
		<include refid="bmsProductJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO bms_product(
			id,
			name,
			product_ident,
			description,
			product_type,
			cpsp_id,
			biz_type,
			render_period,
			tariff_policy_code,
			discount_policy_code,
			create_src,
			fee_type,
			fixed_fee,
			list_price,
			limit_times,
			promote_expire_time,
			usage_method,
			roll_charge,
			credit_level,
			level,
			multi_screen_pd,
			sub_effect_type,
			trial_duration,
			sub_payment_type,
			unsub_effect_type,
			unsub_refund_type,
			start_time,
			expire_time,
			review_time,
			status,
			sort,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag,
			remarks,
			remark1
		) VALUES (
			#{id},
			#{name},
			#{productIdent},
			#{description},
			#{productType},
			#{cpspId},
			#{bizType},
			#{renderPeriod},
			#{tariffPolicyCode},
			#{discountPolicyCode},
			#{createSrc},
			#{feeType},
			#{fixedFee},
			#{listPrice},
			#{limitTimes},
			#{promoteExpireTime},
			#{usageMethod},
			#{rollCharge},
			#{creditLevel},
			#{level},
			#{multiScreenPd},
			#{subEffectType},
			#{trialDuration},
			#{subPaymentType},
			#{unsubEffectType},
			#{unsubRefundType},
			#{startTime},
			#{expireTime},
			#{reviewTime},
			#{status},
			#{sort},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag},
			#{remarks},
			#{remark1}
		)
	</insert>
	
	<update id="update">
		UPDATE bms_product SET 	
			name = #{name},
			product_ident = #{productIdent},
			description = #{description},
			product_type = #{productType},
			cpsp_id = #{cpspId},
			biz_type = #{bizType},
			render_period = #{renderPeriod},
			tariff_policy_code = #{tariffPolicyCode},
			discount_policy_code = #{discountPolicyCode},
			create_src = #{createSrc},
			fee_type = #{feeType},
			fixed_fee = #{fixedFee},
			list_price = #{listPrice},
			limit_times = #{limitTimes},
			promote_expire_time = #{promoteExpireTime},
			usage_method = #{usageMethod},
			roll_charge = #{rollCharge},
			credit_level = #{creditLevel},
			level = #{level},
			multi_screen_pd = #{multiScreenPd},
			sub_effect_type = #{subEffectType},
			trial_duration = #{trialDuration},
			sub_payment_type = #{subPaymentType},
			unsub_effect_type = #{unsubEffectType},
			unsub_refund_type = #{unsubRefundType},
			start_time = #{startTime},
			expire_time = #{expireTime},
			review_time = #{reviewTime},
			status = #{status},
			sort = #{sort},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks},
			remark1 = #{remark1}
		WHERE id = #{id}
	</update>
	
	
	<!--物理删除-->
	<update id="delete">
		DELETE FROM bms_product
		WHERE id = #{id}
	</update>
	
	<!--逻辑删除-->
	<update id="deleteByLogic">
		UPDATE bms_product SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	
	<!-- 根据实体名称和字段名称和字段值获取唯一记录 -->
	<select id="findUniqueByProperty" resultType="BmsProduct" statementType="STATEMENT">
		select * FROM bms_product  where ${propertyName} = '${value}'
	</select>


	<!-- 排序功能 Begin -->
	<!-- 读取上一条数据 -->
	<select id="selectTopSort" resultType="java.lang.Long">
		SELECT sort FROM bms_product WHERE sort !=''
		<include refid="condition"/>
		ORDER BY sort ASC limit 0,1
	</select>

	<select id="selectPreviousSort" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT id,sort FROM bms_product WHERE sort &gt; #{sort}
		<include refid="condition"/>
		ORDER BY sort ASC limit 0,1
	</select>

	<!-- 读取下一条数据 -->
	<select id="selectNextSort" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT id,sort FROM bms_product WHERE sort &lt; #{sort}
		<include refid="condition"/>
		ORDER BY sort DESC limit 0,1
	</select>

	<!-- 修改当前数据的排序 -->
	<update id="updateSelfSort" parameterType="java.util.Map">
		UPDATE bms_product SET sort = #{sort} WHERE id = #{id}
		<include refid="condition"/>
	</update>

	<!-- 修改当前的上一条、下一条的排序数据 -->
	<update id="updateOtherSort" parameterType="java.util.Map">
		UPDATE bms_product SET sort = #{sort} WHERE  sort = #{origianlSort}
		<include refid="condition"/>
	</update>
	<!-- 排序功能 End -->
	<sql id="condition">
		<if test="name != null and name !='' ">
			and name = #{name}
		</if>
		<if test="productIdent != null and productIdent != '' ">
			and product_ident = #{productIdent}
		</if>
		<if test="startTimeBegin != null and startTimeBegin != '' and startTimeEnd != null and startTimeEnd != ''">
			AND start_time between #{startTimeBegin} and #{startTimeEnd}
		</if>
		<if test="expireTimeBegin != null and expireTimeBegin !='' and expireTimeEnd != null and expireTimeEnd !=''">
			AND expire_time between  #{expireTimeBegin} and #{expireTimeEnd}
		</if>
		<if test="status != null and status !=''">
			AND status = #{status}
		</if>
	</sql>
</mapper>